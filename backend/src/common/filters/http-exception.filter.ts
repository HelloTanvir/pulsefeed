import { ArgumentsHost, Catch, ExceptionFilter, HttpException } from '@nestjs/common';
import { ValidationError } from 'class-validator';
import { Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
    catch(exception: HttpException, host: ArgumentsHost) {
        const ctx = host.switchToHttp();
        const response = ctx.getResponse<Response>();

        const status = exception.getStatus();
        let error = exception.getResponse();

        // format validation errors generated by class-validator
        if (Array.isArray(error) && error?.[0] instanceof ValidationError) {
            error = error.reduce(
                (acc, e) => ({
                    ...acc,
                    [e.property]: Object.values(e.constraints).join(', '), // join all constraints into a single string
                }),
                {}
            );
        }

        if (typeof error === 'object') {
            for (const key in error) {
                if (key === 'message') {
                    // if error has a message key, delete all other fields and use it as the global error message
                    const message = error[key];
                    for (const k in error) {
                        delete error[k];
                    }
                    error['global'] = message;
                } else if (Array.isArray(error[key])) {
                    // if errors are arrays of strings, convert them to comma-separated strings
                    error[key] = Object.values(error[key]).join(', ');
                }
            }
        }

        response.status(status).json({
            statusCode: status,
            message: exception.message,
            data: null,
            error: typeof error === 'string' ? { global: error } : error, // if error is a string, it's a global error
        });
    }
}
